options{multi=true;}

/* Il reste a faire : 
 * Ajouter les structures et les enum 
 * Ajouter les appel de fonction
 * Gérer les return pour les fonctions 
 * Ajotuer pointeur et tableau
 * Revoir les commentaire avec Token Speciaux
 * Et la la partie 1 sera terminé !!!!!!!!!!!!!!!!!!!!!!!!!!!
 * 
 * Après il faudra gérer au mieux l'arbre avec les AST pour pouvoir regourper les node et que l'affichage de larbre soit propre 
 * 
 * Bon le deux gérer les erreurs j'ai déja changer les retour valeur pour les afficher dans l'arbre */


PARSER_BEGIN(Projet)

import java.io.*;

public class Projet {
	public static void main(String[] args) throws Exception {
		System.out.println(args[0]);
		System.out.println("Debut parsing du code C");
		Projet parser = new Projet(new FileReader(new File(args[0])));
		parser.Axiome ();
		
		System.out.println("Parsing = OK.");
		Node racine = parser.jjtree.rootNode();
		((SimpleNode)racine).dump(">");
	}
}

PARSER_END(Projet)


/** Tokens skip **/
SKIP : { 
	" " | "\r" | "\t" | "\n"
}


/** Tokens reserved **/
TOKEN : {
	

 	  < IF: "if" > 
	| < FOR : "for" >
  	| < THEN: "then" >
  	| < ELSE: "else">
  	| < DO: "do" >
  	| < WHILE: "while" >
  	| < BREAK: "break" >
  	| < SWITCH: "switch" >
  	| < CASE: "case" >
  	| < RETURN: "return" >


	| < INT: "int" >
	| < CHAR: "char" >
	| < FLOAT: "float" >
  	
  	
	| < PARAL: "(" > 
  	| < PARAR: ")" >
  	
	| < ACCOL: "{" > 
  	| < ACCOR: "}" >
  	
  	| < BL: "<" >
	| < BR: ">" >
  	
	| < EGAL: "=" > 
  	| < PVIRG: ";" >
	| < POINT: "." >
	| < NOT : "!" >
	| < VIRG: "," >
	| < DPOINT: ":" >
	
	| < TRUE: "true" >
	| < FALSE: "false" >
	
	| < INCR: "++" >
	| < DECR: "--" >
	
	| < PLUS: "+" >
	| < MINUS: "-" >
	| < MULT: "*" >
	| < DIV: "/" >
	| < MOD: "%" >
	
	| <AND: "&" >
	| <OR: "|" >

	| < SHARP: "#" >	
	| < INCLUDE: "include" >
	| < EXTENSI: ".h" >
	
	| < STRUCT: "struct" >
	| < ENUM: "enum" >
	 
}



/** Tokens literaux */

TOKEN : {
	  < INTEGER: (["0"-"9"])+ >
	| < IDENT: (["a"-"z"] | ["A"-"Z"]) (["a"-"z"] | ["A"-"Z"] | ["0"-"9"] | "_")* >
}


/** Syntaxique rules **/
void Axiome()#void : {} {
	  Code()
	//AffichageLexeme()
}


/** Shows Lexèmes **/
void AffichageLexeme() : {} {
	(
		( < IF> {System.out.print("Token IF = ");}
		| < THEN> {System.out.print("Token THEN = ");}
		| < PARAL> {System.out.print("Token PARAL = ");}
		| < PARAR> {System.out.print("Token PARAR = ");}
		| < ACCOL> {System.out.print("Token ACCOL = ");}
		| < ACCOR> {System.out.print("Token ACCOR = ");}
		| < EGAL> {System.out.print("Token EGAL = ");}
		| < PVIRG> {System.out.print("Token PVIRG = ");}
		| < ELSE> {System.out.print("Token ELSE = ");}
		| <FOR> {System.out.print("Token FOR = ");}
		| <PLUS> {System.out.print("Token PLUS = ");}
		| <MINUS> {System.out.print("Token MINUS = ");}
		| <MULT> {System.out.print("Token MULT = ");}
		| <DIV> {System.out.print("Token DIV = ");}
		| <IDENT> {System.out.print("Token IDENT = ");}
		| <INTEGER> {System.out.print("Token INTEGER = ");}
		) {System.out.println(token.image);}
	)+ 
	<EOF>
}


/** Syntaxique code rules **/

void Code() : {} {
	Instructions()
	<EOF> {System.out.println("Fin fichier.");}
}


void Instructions()#void : {} {
	(  	 
		  Comment()
		| Include()
		| Function()
	)+	
}

void Operator() : {} {
	<PLUS> | <MINUS> | <DIV> | <MULT>
}

void LogicalOperator() : {} {
	<AND> | <OR> // Voir pour ajouter && || avec le LOOKAHEAD pour retirer les récusrivitées a gauche
}


void Include()#Include : {} {
		<SHARP><INCLUDE> <BL> Ident() (<EXTENSI>)? <BR>
}	


void Comment()#Commentaire : {} {
		<DIV><MULT> (LOOKAHEAD(Ident()) Ident())+ <MULT><DIV>
}

void Type()#Type : {String val = "";} { 
		(<INT> | <CHAR> | <FLOAT>) {
									try {
										val = token.image;
									} catch (Exception e) {
										System.err.println("Not a type : " + token.image);
									}
										jjtThis.setValeur(val);
									}
}

void Body()#void : {} { // Revoir car warning LOOKAHEAD
  	(  
	  Comment()
	| Affectation()
	| Boucles()
	| Condition()
  )*
}

// On gère le main dansl es fonction ! il faut jsute faire un test pour savoir s'il y a un return dedans pour les fonctions <INT>
void Function()#Function : {} {
	Type() Ident() <PARAL> Parameters() <PARAR> <ACCOL> Body() <ACCOR>
}




void Parameters() : {} { // Erreur pour plusieurs paramètres
				(LOOKAHEAD(3)	  (Type() Ident() <VIRG>)
							    | (Type() Ident() ))*	
}

void ConditionSigne() : {} { // Permet de lever l'indécision a revoir pour pouvoir en mettre plus
		LOOKAHEAD(4)  <BL><EGAL>   // <= 
					| <BR><EGAL>   // >=
					| <EGAL><EGAL> // ==
					| <NOT><EGAL>  // !=
					/*| <BL>
					| <BR>*/
}


void CorpsCondition()#corpCC(2) : {} { // a revoir pour ajouter LogicalOperator()
	Ident() ConditionSigne() (Ident() | (<INTEGER>)*) 	
}

void Condition() : {} {
	<IF> <PARAL> CorpsCondition() <PARAR> <ACCOL> Body() <ACCOR> [ <ELSE>  <ACCOL> Body() <ACCOR>]
}

void Affectation()#Affectation : {} {
	((Type() Ident()) | Ident()) <EGAL> (<INTEGER>)+ <PVIRG>
}

void Boucles() : {} {
	      For() 
		| While()
		| DoWhile()
		| Switch()
}


void DIncrementation() : {} {
	Ident() (<INCR> | <DECR>)
}


void For() : {} {
	<FOR> <PARAL> Affectation() Ident() ConditionSigne() (Ident() | (<INTEGER>)+) <PVIRG> DIncrementation() <PARAR> <ACCOL> Body() <ACCOR> 	
}

void While() : {} { // Probleme avec le while je comprend pas trop pk 
	<WHILE> <PARAL> CorpsCondition() <PARAR> <ACCOL> Body() Ident() (<INCR> | <DECR>) <ACCOR>
}

void DoWhile() : {} {
	<DO> <ACCOL> Body() <ACCOR> <WHILE> <PARAL> CorpsCondition() <PARAR>
}

void Switch() : {} { // Ajouter la section default 
	<SWITCH> <PARAL> Ident() <PARAR> <ACCOL> (<CASE> Ident() <DPOINT> Body() <BREAK> <PVIRG>)+ <ACCOR>
}


/** Expressions Arithmetiques */

void ExpressionArithmetique() : {} {
	ProduitArithmetique() (   ( <PLUS> ExpressionArithmetique())
				| ( <MINUS> ExpressionArithmetique() ) )?
}

void ProduitArithmetique() : {} {
	Element() (   ( <MULT> ProduitArithmetique() ) 
		    | ( <DIV> ProduitArithmetique()  ))?
}

void Element() #void : {} {
	 Entier() | <IDENT> 
}

void Entier() : {
  int val1 = 1;
  int val = 0;
} {
  (<MINUS> { })?
  <INTEGER> {   }
}

/** Expressions Booleennes */
void ExpressionBooleenne() : {} {
	 Element() ( <EGAL><EGAL> (<TRUE>|<FALSE>) )? | <NOT>Element()
}


void Ident() : {String val = "";} {
	<IDENT> {
	try {
		val = token.image;
	} catch (Exception e) {
		System.err.println("Not a string : " + token.image);
	}
		jjtThis.setValeur(val);
	}
}

/*
void Integer() : {Int val = 0;} {
	<INTEGER> {
	try {
		val = token.image;
	} catch (Exception e) {
		System.err.println("Not a number : " + token.image);
	}
		jjtThis.setValeur(val);
	}
}*/
