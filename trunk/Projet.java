/* Generated By:JJTree&JavaCC: Do not edit this line. Projet.java */
import java.io.*;

public class Projet/*@bgen(jjtree)*/implements ProjetTreeConstants, ProjetConstants {/*@bgen(jjtree)*/
  protected static JJTProjetState jjtree = new JJTProjetState();public static void main(String[] args) throws Exception {
                System.out.println(args[0]);
                System.out.println("Debut parsing du code C");
                Projet parser = new Projet(new FileReader(new File(args[0])));
                parser.Axiome ();

                System.out.println("Parsing = OK.");
                Node racine = parser.jjtree.rootNode();
                ((SimpleNode)racine).dump(">");
        }

/** Syntaxique rules **/
  static final public void Axiome() throws ParseException {
    Code();
  }

/** Shows Lex√®mes **/
  static final public void AffichageLexeme() throws ParseException {
                          /*@bgen(jjtree) AffichageLexeme */
  ASTAffichageLexeme jjtn000 = new ASTAffichageLexeme(JJTAFFICHAGELEXEME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          jj_consume_token(IF);
                         System.out.print("Token IF = ");
          break;
        case THEN:
          jj_consume_token(THEN);
                           System.out.print("Token THEN = ");
          break;
        case PARAL:
          jj_consume_token(PARAL);
                            System.out.print("Token PARAL = ");
          break;
        case PARAR:
          jj_consume_token(PARAR);
                            System.out.print("Token PARAR = ");
          break;
        case ACCOL:
          jj_consume_token(ACCOL);
                            System.out.print("Token ACCOL = ");
          break;
        case ACCOR:
          jj_consume_token(ACCOR);
                            System.out.print("Token ACCOR = ");
          break;
        case EGAL:
          jj_consume_token(EGAL);
                           System.out.print("Token EGAL = ");
          break;
        case PVIRG:
          jj_consume_token(PVIRG);
                            System.out.print("Token PVIRG = ");
          break;
        case ELSE:
          jj_consume_token(ELSE);
                           System.out.print("Token ELSE = ");
          break;
        case FOR:
          jj_consume_token(FOR);
                         System.out.print("Token FOR = ");
          break;
        case PLUS:
          jj_consume_token(PLUS);
                          System.out.print("Token PLUS = ");
          break;
        case MINUS:
          jj_consume_token(MINUS);
                           System.out.print("Token MINUS = ");
          break;
        case MULT:
          jj_consume_token(MULT);
                          System.out.print("Token MULT = ");
          break;
        case DIV:
          jj_consume_token(DIV);
                         System.out.print("Token DIV = ");
          break;
        case IDENT:
          jj_consume_token(IDENT);
                           System.out.print("Token IDENT = ");
          break;
        case INTEGER:
          jj_consume_token(INTEGER);
                             System.out.print("Token INTEGER = ");
          break;
        case MAIN:
          jj_consume_token(MAIN);
                          System.out.println("Token MAIN = ");
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                   System.out.println(token.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAIN:
        case IF:
        case FOR:
        case THEN:
        case ELSE:
        case PARAL:
        case PARAR:
        case ACCOL:
        case ACCOR:
        case EGAL:
        case PVIRG:
        case PLUS:
        case MINUS:
        case MULT:
        case DIV:
        case INTEGER:
        case IDENT:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(0);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** Syntaxique code rules **/
  static final public void Code() throws ParseException {
               /*@bgen(jjtree) Code */
  ASTCode jjtn000 = new ASTCode(JJTCODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Instructions();
      jj_consume_token(0);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               System.out.println("Fin fichier.");
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Instructions() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIN:
        Main();
        break;
      case IF:
        Condition();
        break;
      case IDENT:
        Affectation();
        break;
      case FOR:
        For();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIN:
      case IF:
      case FOR:
      case IDENT:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
    }
  }

  static final public void Main() throws ParseException {
                    /*@bgen(jjtree) Main */
  ASTMain jjtn000 = new ASTMain(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAIN);
      jj_consume_token(PARAL);
      jj_consume_token(PARAR);
      jj_consume_token(ACCOR);
      jj_consume_token(ACCOL);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Condition() throws ParseException {
                    /*@bgen(jjtree) Condition */
  ASTCondition jjtn000 = new ASTCondition(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(PARAL);
      Ident();
      jj_consume_token(PARAR);
      jj_consume_token(THEN);
      jj_consume_token(ACCOL);
      Instructions();
      jj_consume_token(ACCOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        jj_consume_token(ACCOL);
        Instructions();
        jj_consume_token(ACCOR);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Affectation() throws ParseException {
                                  /*@bgen(jjtree) Affectation */
  ASTAffectation jjtn000 = new ASTAffectation(JJTAFFECTATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Ident();
      jj_consume_token(EGAL);
      ExpressionArithmetique();
      jj_consume_token(PVIRG);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void For() throws ParseException {
              /*@bgen(jjtree) For */
  ASTFor jjtn000 = new ASTFor(JJTFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      jj_consume_token(PARAL);
      Ident();
      jj_consume_token(EGAL);
      ExpressionArithmetique();
      jj_consume_token(PVIRG);
      Ident();
      jj_consume_token(PVIRG);
      Ident();
      jj_consume_token(PARAR);
      jj_consume_token(ACCOL);
      Instructions();
      jj_consume_token(ACCOR);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** Expressions Arithmetiques */
  static final public void ExpressionArithmetique() throws ParseException {
                                 /*@bgen(jjtree) ExpressionArithmetique */
  ASTExpressionArithmetique jjtn000 = new ASTExpressionArithmetique(JJTEXPRESSIONARITHMETIQUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ProduitArithmetique();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          ExpressionArithmetique();
          break;
        case MINUS:
          jj_consume_token(MINUS);
          ExpressionArithmetique();
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ProduitArithmetique() throws ParseException {
                              /*@bgen(jjtree) ProduitArithmetique */
  ASTProduitArithmetique jjtn000 = new ASTProduitArithmetique(JJTPRODUITARITHMETIQUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Element();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case DIV:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULT:
          jj_consume_token(MULT);
          ProduitArithmetique();
          break;
        case DIV:
          jj_consume_token(DIV);
          ProduitArithmetique();
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Element() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case INTEGER:
      Entier();
      break;
    case IDENT:
      jj_consume_token(IDENT);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Entier() throws ParseException {
                 /*@bgen(jjtree) Entier */
  ASTEntier jjtn000 = new ASTEntier(JJTENTIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int val1 = 1;
  int val = 0;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        jj_consume_token(MINUS);

        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(INTEGER);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;

    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/** Expressions Booleennes */
  static final public void ExpressionBooleenne() throws ParseException {
                              /*@bgen(jjtree) ExpressionBooleenne */
  ASTExpressionBooleenne jjtn000 = new ASTExpressionBooleenne(JJTEXPRESSIONBOOLEENNE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case INTEGER:
      case IDENT:
        Element();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EGAL:
          jj_consume_token(EGAL);
          jj_consume_token(EGAL);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TRUE:
            jj_consume_token(TRUE);
            break;
          case FALSE:
            jj_consume_token(FALSE);
            break;
          default:
            jj_la1[11] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        break;
      case NOT:
        jj_consume_token(NOT);
        Element();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  static final public void Ident() throws ParseException {
                 /*@bgen(jjtree) Ident */
        ASTIdent jjtn000 = new ASTIdent(JJTIDENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String val = "";
    try {
      jj_consume_token(IDENT);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
        try {
                val = token.image;
        } catch (Exception e) {
                System.err.println("Not a string : " + token.image);
        }
        //jjtThis.setValeur(val);

    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ProjetTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3f0fc3e0,0x3f0fc3e0,0x200000e0,0x200000e0,0x200,0x3000000,0x3000000,0xc000000,0xc000000,0x32000000,0x2000000,0xc00000,0x40000,0x32200000,};
   }

  /** Constructor with InputStream. */
  public Projet(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Projet(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ProjetTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Projet(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ProjetTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Projet(ProjetTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ProjetTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[30];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
